/**
 * Copyright 2014 General Dynamics Information Technology.
 */

define([
        'Bda/weather/vector/AmvParser',
        'Cesium/Core/Cartographic',
        'Cesium/Core/defined',
        'Cesium/Core/defineProperties',
        'Cesium/Core/DeveloperError',
        'Cesium/Core/Ellipsoid',
        'Cesium/Core/Event',
        'Cesium/Core/loadText',
        'Cesium/DataSources/BillboardGraphics',
        'Cesium/DataSources/DataSource',
        'Cesium/DataSources/DataSourceClock',
        'Cesium/DataSources/Entity',
        'Cesium/DataSources/EntityCollection',
        'Cesium/DataSources/LabelGraphics',
        'Cesium/ThirdParty/when'
    ], function(
        AmvParser,
        Cartographic,
        defined,
        defineProperties,
        DeveloperError,
        Ellipsoid,
        Event,
        loadText,
        BillboardGraphics,
        DataSource,
        DataSourceClock,
        Entity,
        EntityCollection,
        LabelGraphics,
        when) {
    "use strict";
    
    
   /**
     * A {@link DataSource} which processes vector
     * data sources.
     * @alias VectorDataSource
     * @constructor
     */
    var VectorDataSource = function() {
        //default line, wind barb with just direction, no speed feathers
        var defaultMarker = new Entity();
        var marker = new LabelGraphics();
        marker.scale = .5;
        marker.show = false;
        defaultMarker.label = marker;

        var defaultVector = new Entity();
        var vector = new BillboardGraphics();
        vector.show = false;
        defaultVector.billboard = vector;
               
        this._changed = new Event();
        this._error = new Event();
        this._isLoading = false;
        this._loading = new Event();
        this._entityCollection = new EntityCollection();
        this._clock = new DataSourceClock();

        this.defaultMarker = defaultMarker;
        this.defaultVector = defaultVector;

        this._name = undefined;
    };

    defineProperties(VectorDataSource.prototype, {
        /**
         * Gets the name of this data source.
         * @memberof VectorDataSource.prototype
         * @returns {string} The name.
         */
        name : {
            get : function() {
                return this._name;
            }
        },
        
        /**
         * Gets/sets the clock. 
         * @memberof VectorDataSource.prototype
         * @return {Clock}
         */
        clock : {
            get : function() {
                return this._clock;
            },
            set : function(clock) {
                this._clock = clock;
            },
        },
   
        /**
         * Gets the EntityCollection generated by this data source.
         * @memberof VectorDataSource
         * @returns {EntityCollection} The collection of objects generated by this data source.
         */
        entities : {
            get : function() {
                return this._entityCollection;
            }
        },
        
        /**
         * Gets a value indicating if the data source is currently loading data.
         * @memberof VectorDataSource.prototype
         * @type {Boolean}
         */
        isLoading : {
            get : function() {
                return this._isLoading;
            }
        },
        
        /**
         * Gets an event that will be raised when the underlying data changes.
         * @memberof VectorDataSource.prototype
         * @type {Event}
         */
        changedEvent : {
            get : function() {
                return this._changed;
            }
        },

        /**
         * Gets an event that will be raised if an error is encountered during processing.
         * @memberof VectorDataSource.prototype
         * @type {Event}
         */
        errorEvent : {
            get : function() {
                return this._error;
            }
        },
        
        /**
         * Gets an event that will be raised when the data source either starts or stops loading.
         * @memberof VectorDataSource.prototype
         * @type {Event}
         */
        loadingEvent : {
            get : function() {
                return this._loading;
            }
        }
    });

    /**
     * Asynchronously loads the WXXM at the provided url, replacing any existing data.
     * @param {string} url The url to be processed.
     * @returns {Promise} a promise that will resolve when the WXXM is loaded.
     * @exception {DeveloperError} url is required.
     */
    VectorDataSource.prototype.loadUrl = function(url, windType, level) {
        if (!defined(url)) {
            throw new DeveloperError('url is required.');
        }

        DataSource.setLoading(this, true);
        
        var dataSource = this;
        return when(loadText(url), function(string) {
            return dataSource.load(string, windType, level);
        }, function(error) {
            DataSource.setLoading(dataSource, false);
            dataSource._error.raiseEvent(dataSource, error);
            return when.reject(error);
        });
    };

    /**
     * Asynchronously loads the provided vector object, replacing any existing data.     *
     * @param {Document} wxxm The object to be processed.
     * @param {string} [source] The base URI of any relative links in the  object.
     * @returns {Promise} a promise that will resolve when the wxxm is loaded.
     * @exception {DeveloperError} string is required.
     */
    VectorDataSource.prototype.load = function(string, windType, level) {
        if (!defined(string)) {
            throw new DeveloperError('string is required.');
        }
        
        DataSource.setLoading(this, true);
        var dataSource = this;
        
        
        when (AmvParser.parseAsciiData(dataSource, string, windType, level, defaultCrsFunction), parseSuccess, parseFailure);
        
        function parseSuccess() {
            dataSource._changed.raiseEvent(dataSource);
            DataSource.setLoading(this, false);           
        }

        function parseFailure(error) {
            DataSource.setLoading(this, false);
            dataSource._error.raiseEvent(dataSource, error);
            return when.reject(error);            
        }
    };
    
    /**
     * Converts the degree coordinates to cartesian3 coordinates.
     * @param {Array} coordinates  The array of longitude and latitude coordinates
     * @returns {Cartesian3}
     */
    function defaultCrsFunction(coordinates) {
        var cartographic = Cartographic.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);
        return Ellipsoid.WGS84.cartographicToCartesian(cartographic);
    }
    
    /**
     * An object that maps the name of a crs to a callback function which takes a gml coordinate
     * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of gml which
     * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,
     * for example 'EPSG:4326'.
     * @memberof VectorDataSource
     * @type {Object}
     */
    VectorDataSource.crsNames = {
        'urn:ogc:def:crs:OGC:1.3:CRS84' : defaultCrsFunction,
        'EPSG:4326' : defaultCrsFunction
    };

    /**
     * An object that maps the href property of a crs link to a callback function
     * which takes the crs properties object and returns a Promise that resolves
     * to a function that takes a gml coordinate and transforms it into a WGS84 Earth-fixed Cartesian.
     * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming
     * the link has a type specified.
     * @memberof VectorDataSource
     * @type {Object}
     */
    VectorDataSource.crsLinkHrefs = {};

    /**
     * An object that maps the type property of a crs link to a callback function
     * which takes the crs properties object and returns a Promise that resolves
     * to a function that takes a gml coordinate and transforms it into a WGS84 Earth-fixed Cartesian.
     * Items in <code>crsLinkHrefs</code> take precedence over this object.
     * @memberof VectorDataSource
     * @type {Object}
     */
    VectorDataSource.crsLinkTypes = {};

    return VectorDataSource;
});
